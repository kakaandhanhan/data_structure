#include <stdio.h>
#include <stdlib.h>
#define OK 1
#define ERROR 0
typedef int Status;
typedef char Elemtype;
typedef struct LNode
{
	Elemtype data;
	struct LNode  *next;
}LNode ,*LinkList;

//创建一个空链表
Status InitList_L(LinkList* L)
{
	*L = (LinkList)malloc(sizeof(LNode));
	(*L)->next = NULL;
	return OK;
}

//判断是否为空
int ListEmpty(LinkList L)
{
	if (L->next==NULL)
	{
		return 1;
	}
	
	return 0;
}

//销毁单链表
Status DestroyList(LinkList* L)
{
	LinkList p;
	while (*L)
	{
		p = *L;
		(*L) = (*L)->next;
		free(p);
	}
	return OK;
}

//清空链表
Status ClearList(LinkList* L)
{
	LinkList p, q;
	p = (*L)->next;
	while (p != NULL)
	{
		q = p->next;
		free(p);
		p = q;
	}
	(*L)->next = NULL;
	return 0;
}

//求单链表的表长
int ListLength(LinkList L)
{
	LinkList p;
	p = L->next;
	int lenth = 0;
	while (p)
	{
		lenth++;
		p = p->next;
	}
	return lenth;
}

//查找单链表中的某一结点
Status GetElem_L(LinkList L,int i,Elemtype *e)
{
	LinkList p;
	p = L->next;
	int j = 1;

	while (p && j < i)
	{
		p = p->next;
		j++;
	}
	if (p == NULL || j > i)
	{
		return ERROR;
	}
	*e = p->data;
	return OK;

}

//按值查找返回地址
LinkList LocateElem_L(LinkList L, Elemtype e)
{
	LinkList p;
	p = L->next;
	while (p && p->data != e)
	{
		p = p->next;
	}
	return p;

}

//按值查找返回序号
int LocateElem_L(LinkList L, Elemtype e)
{
	LinkList p;
	p = L->next;
	int j = 1;
	while (p && p->data != e)
	{
		p = p->next;
		j++;
	}
	if (p)
	{
		return j;
	}
	return 0;

}

//在第i个元素之前插入元素
Status ListInsert_L(LinkList* L, int i, Elemtype e)
{
	LinkList p;
	p = (*L)->next;
	int j;
	j = 1;
	while (p && j < i)
	{
		p = p->next;
		j++;
	}
	if (!p || j > i)
	{
		return ERROR;
	}
	LinkList q;
	q = (LinkList)malloc(sizeof(LNode));
	q->data = e;
	q->next = p->next;
	p->next = q;
	return OK;

}

//删除节点
Status ListDelect_L(LinkList* L, int i,Elemtype *e)
{
	LinkList p;
	p = (*L)->next;
	int j = 1;
	while (p && j < i)
	{
		p = p->next;
		j++;
	}
	if (!p->next || j > i)
	{
		return ERROR;
	}
	LinkList q;
	q = p->next;
	p->next = q->next;
	*e = q->data;
	free(q);
	return OK;
}

//头插法
void CreateList_H(LinkList* L, int n)
{
	*L = (LinkList )malloc(sizeof(LNode));
	(*L)->next = NULL;
	int i;
	for (i = n;i > 0;i--)
	{
		LinkList p;
		p = (LinkList)malloc(sizeof(LNode));
		scanf("%c", &(*L)->data);
		p->next = (*L)->next;
		(*L)->next = p;
	}

}

//尾插法
void CreateList_R(LinkList* L, int n)
{
	*L = (LinkList)malloc(sizeof(LNode));
	(*L)->next = NULL;
	int i;
	LinkList p;
	p = *L;
	for (i = 0;i < n;i++)
	{
		LinkList c;
		c = (LinkList)malloc(sizeof(LNode));
		scanf("%c", &c->data);
		c->next = NULL;
		c = p->next;
		p = c;

	}
}
