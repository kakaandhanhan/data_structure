#include <stdio.h>
#include <stdlib.h>
#define MAX 999999
#define MAXVEX 100

typedef struct graph
{
	int Vexs[MAXVEX];
	int arcs[MAXVEX][MAXVEX];
	int vexnum, arcnum;
}Graph;
typedef struct SeqQuene
{
	int Quene[MAXVEX];
	int front;
	int rear;

}SeqQuene;

void InitSeqQuene(SeqQuene* Q)
{
	Q->front = 0;
	Q->rear = 0;
}

int EmptySeqQuene(SeqQuene* Q)
{
	if (Q->front == Q->rear)
	{
		return 1;
	}
	return 0;
}

int EnSeqQuene(SeqQuene* Q,int data)
{
	if ((Q->rear + 1) % MAXVEX == Q->front)
	{
		printf("栈满不能入队\n");
		return 0;
	}
	Q->Quene[Q->rear] = data;
	Q->rear = (Q->rear + 1) % MAXVEX;
	return 1;
}

int DeSeqQuene(SeqQuene* Q)
{
	if (EmptySeqQuene(Q))
	{
		printf("栈空，出不来\n");
		return 0;
	}
	int data;
	data = Q->Quene[Q->front];
	Q->front = (Q->front + 1) % MAXVEX;
	return data;
}
int Initgraph(Graph* friend)
{
	int i;
	int j;
	int friend1, friend2;
	printf("请输入朋友个数和关系数\n");
	scanf("%d %d", &friend->vexnum, &friend->arcnum);
	if (friend->vexnum == 0 || friend->arcnum == 0)
	{
		return 0;
	}
	printf("请输入朋友关系\n");
	for (i = 0; i < friend->vexnum+1; i++)
	{
		for (j = 0; j < friend->vexnum+1; j++)
		{
			friend->arcs[i][j] = 0;
		}

	}
	for (i = 1; i < friend->arcnum+1; i++)
	{
		scanf("%d %d", &friend1, &friend2);
		friend->arcs[friend1][friend2] = 1;
		friend->arcs[friend2][friend1] = 1;
	}
	return 1;
}

int FirstAdjVex(Graph* friend, int p)
{
	int j;
	for (j = 1; j <= friend->vexnum; j++)
	{
		if (friend->arcs[p][j] == 1)
		{
			return j;
		}
	}
	return -1;
}

int NextAdjVex(Graph* friend, int p, int w)
{
	int i, j;
	for (j = w + 1; j <= friend->vexnum; j++)
	{
		if (friend->arcs[p][j] == 1)
		{
			return j;
		}
	}
	return -1;
}
void BFS(Graph* Q,int start)
{
	SeqQuene S;
	InitSeqQuene(&S);
	int visited[MAXVEX];
	int len = Q->vexnum;
	int level[MAXVEX];
	level[start] = 1;
	int i;
	int visited_num = 0;
	for (i = 1; i <= len; i++)
	{
		visited[i] = 0;
		level[i] = 0;
	}
	visited[start] = 1;
	EnSeqQuene(&S, start);
	visited_num = 1;
	int j;
	int six = 1;
	while (!EmptySeqQuene(&S))
	{
			int data = DeSeqQuene(&S);
			int w;
			for (w = FirstAdjVex(Q, data); w != -1; w = NextAdjVex(Q, data, w))
			{
				if (!visited[w])
				{
					visited_num++;
					visited[w] = 1;
					level[w] = level[data] + 1;
					EnSeqQuene(&S, w);
					if (level[w] <= 6)
					{
						six++;
					}
				}
			}
	}
	printf("%d: %.2f%%\n", start, (100.00 *six) / Q->vexnum);
}
int main()
{
	Graph friend;
	int i;
	while (Initgraph(&friend))
	{
		for (i = 1; i <= friend.vexnum; i++)
		{
			printf("比例为\n");
			BFS(&friend, i);
		}
		
	}
	return 0;
}
