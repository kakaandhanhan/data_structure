#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#define MAX 100

typedef struct
{
	int weight;
	int parent, lchild, rchild;
}HTNode,*HuffmanTree;

int* getcount(char *str,int *n)
{
	int* counter = calloc(26,sizeof(counter));
	int length = strlen(str);
	*n = 0;
	int i;
	int j = 0;
	for (i = 0; i < length; i++)
	{
		counter[str[i] - 'a']++;
	}
	for (i= 0; i < 26; i++)
	{
		if (counter[i] != 0)
		{
			j++;
		}
	}
	*n = j;
	for (i = 0; i <26; i++)
	{
		if (counter[i] != 0)
		{
			printf("%c:%d ", i + 'a', counter[i]);
		}
	}
	printf("\n");
	return counter;

}

void select(HuffmanTree HT, int* small, int* small2,int num)
{
	int mini=100000;
	int i;
	for (i = 1; i <= num; i++)
	{
		if (HT[i].parent == 0)
		{
			if (HT[i].weight < mini)
			{
				mini = HT[i].weight;
				*small = i;
			}
		}
		
	}
	mini = 10000;
	for (i = 1; i <= num; i++)
	{
		if (HT[i].parent == 0 && HT[i].weight < mini && i != *small)
		{
			mini = HT[i].weight;
			*small2 = i;
		}
	}


}
void createHuffmantree(HTNode* HT, int n,int *counter)
{
	//初始化
	if (n <= 1)
		return;
	int m = 2 * n - 1;
	int i;
	for (i = 1; i <= m ; i++)
	{
		HT[i].lchild = 0;
		HT[i].rchild = 0;
		HT[i].parent = 0;
	}
	for (i = 1; i <= n; i++)
	{
		HT[i].weight = counter[i - 1];
	}
	//创建树
	int small=0, small2=0;
	for (i = n + 1; i <= m; i++)
	{
		select(HT, &small, &small2, i-1);
		HT[i].weight = HT[small].weight + HT[small2].weight;
		HT[i].lchild = small;
		HT[i].rchild = small2;
		HT[small].parent = i;
		HT[small2].parent = i;
	}

}
void printHuffmaxtree(HTNode* HT, int n)
{
	int i;
	for (i = 1; i <= 2*n-1; i++)
	{
		printf("%d %d %d %d %d\n", i, HT[i].weight, HT[i].parent, HT[i].lchild, HT[i].rchild);
	}
}

void Huffmancode(HTNode* HT, char HC[MAX][MAX], int n)
{
	char temp[20];
	int i;
	for (i = 1; i <= n; i++)
	{
		int strm = 0;
		int p = HT[i].parent;
		int c = i;
		int strnumber = 0;
		while (p != 0)
		{
			if (HT[p].lchild == c)
			{
				temp[strnumber] = '0';
			}
			else
			{
				temp[strnumber] = '1';
			}
			strnumber++;
			c = p;
			p = HT[p].parent;
		}
		temp[strnumber] = '\0';
		for (strnumber = strnumber - 1; strnumber >= 0; strnumber--,strm++)
		{
			HC[i][strm] = temp[strnumber];
		}
		HC[i][strm] = '\0';
	}
}

void printsolocode(int* counter, char HC[MAX][MAX],int n,char *str,char *s)
{
	int i;
	for (i = 0; i < 26; i++)
	{
		if (counter[i] != 0)
		{
			printf("%c:%s ", i + 'a', HC[i + 1]);
		}
	}
	printf("\n");
	int j;
	int q = 0;
	for (i = 0; i < strlen(str); i++)
	{
		printf("%s", HC[str[i] - 'a' + 1]);
		for (j = 0; j < strlen(HC[str[i] - 'a' + 1]); j++)
		{
			s[q++] = HC[str[i] - 'a' + 1][j];
		}
	}
	s[q] = '\0';
	printf("\n");
}

void decodeHuffmancode(HTNode* HT, int* counter, int n, char* s)
{
	int length = strlen(s);
	int i = 0;
	int f = 2 * n - 1;
	while (s[i] != '\0')
	{
		if (s[i] == '0')
		{
			f = HT[f].lchild;
		}
		else
		{
			f = HT[f].rchild;
		}
		if (f <= n)
		{
			int count = 0;
			int q = 0;
			while (count < f)
			{
				if (counter[q] != 0)
				{
					count++;
				}
				q++;
			}
			printf("%c", q + 'a' - 1);
			f = 2 * n - 1;
		}
		i++;
	}
	printf("\n");
}
int main()
{
	char inputstr[MAX];
	printf("请输入样例\n");
	int n;
	HTNode* HT=NULL;
	char HC[MAX][MAX];
	char s[MAX];
	char* wholeHC = calloc(20, sizeof(char));
	while (gets(inputstr)&&strcmp(inputstr,"0")!=0)
	{
		int* counter = getcount(inputstr, &n);
		HT = calloc(2 * n, sizeof(HTNode));
		createHuffmantree(HT, n, counter);
		printHuffmaxtree(HT, n);
		Huffmancode(HT, HC, n);
		printsolocode(counter, HC, n,inputstr,s);
		decodeHuffmancode(HT, counter, n, s);
		fflush(stdin);
	}
	return 0;
}
